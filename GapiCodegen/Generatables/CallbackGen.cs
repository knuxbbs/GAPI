// GtkSharp.Generation.CallbackGen.cs - The Callback Generatable.
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (c) 2002-2003 Mike Kestner
// Copyright (c) 2007 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the GNU General Public
// License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

using System.IO;
using System.Xml;
using GapiCodegen.Interfaces;
using GapiCodegen.Utils;

namespace GapiCodegen.Generatables
{
    /// <summary>
    /// Handles 'callback' elements by creating a public delegate type for the public API (in NAME.cs),
    /// and an internal type that wraps that delegate, to be passed as the actual unmanaged callback (in NAMESPACESharp.NAMENative.cs).
    /// </summary>
    public class CallbackGen : GenBase, IPropertyAccessor
    {
        private readonly Parameters _parameters;
        private readonly ReturnValue _returnValue;
        private Signature _signature;
        private MethodBody _body;
        private bool _valid = true;

        public CallbackGen(XmlElement namespaceElement, XmlElement element) : base(namespaceElement, element)
        {
            _parameters = new Parameters(element[Constants.Parameters])
            {
                HideData = true
            };

            _returnValue = new ReturnValue(element[Constants.ReturnType]);
        }

        public override string MarshalType => _valid ? $"{Namespace}Sharp.{Name}Native" : string.Empty;

        public override string CallByName(string varName)
        {
            return $"{varName}.NativeDelegate";
        }

        public override string FromNative(string varName)
        {
            return $"{Namespace}Sharp.{Name}Wrapper.GetManagedDelegate ({varName})";
        }

        public override string DefaultValue => "null";

        public string InvokerName => _valid ? $"{Namespace}Sharp.{Name}Invoker" : string.Empty;

        public string WrapperName => _valid ? $"{Namespace}Sharp.{Name}Wrapper" : string.Empty;

        public override void Generate(GenerationInfo generationInfo)
        {
            _signature = new Signature(_parameters);
            generationInfo.CurrentType = QualifiedName;

            var sw = generationInfo.OpenStream(Name, Namespace);
            sw.WriteLine($"namespace {Namespace} {{");
            sw.WriteLine();
            sw.WriteLine("\tusing System;");
            sw.WriteLine();
            sw.WriteLine("\t{0} delegate {1} {2}({3});", IsInternal ? "internal" : "public",
                _returnValue.CsType, Name, _signature);
            sw.WriteLine();
            sw.WriteLine("}");
            sw.Close();

            GenerateWrapper(generationInfo);

            Statistics.CallbackCount++;
        }

        public string GenerateWrapper(GenerationInfo generationInfo)
        {
            var wrapper = $"{Name}Native";

            if (!Validate())
                return string.Empty;

            var log = new LogWriter(MarshalType);
            _body = new MethodBody(_parameters, log);

            var savedWriter = generationInfo.Writer;
            var sw = generationInfo.Writer = generationInfo.OpenStream(MarshalType, Namespace);

            sw.WriteLine($"namespace {Namespace}Sharp {{");
            sw.WriteLine();
            sw.WriteLine("\tusing System;");
            sw.WriteLine("\tusing System.Runtime.InteropServices;");
            sw.WriteLine();
            sw.WriteLine("#region Autogenerated code");
            //sw.WriteLine ("\t[UnmanagedFunctionPointer (CallingConvention.Cdecl)]");
            sw.WriteLine($"\tinternal delegate {_returnValue.MarshalType} {wrapper}({_parameters.ImportSignature});");
            sw.WriteLine();

            GenerateInvoker(generationInfo, sw);

            sw.WriteLine($"\tinternal class {Name}Wrapper {{");
            sw.WriteLine();

            var managedCall = new ManagedCallString(_parameters);

            sw.WriteLine($"\t\tpublic {_returnValue.MarshalType} NativeCallback ({_parameters.ImportSignature})");
            sw.WriteLine("\t\t{");

            var unconditional = managedCall.Unconditional("\t\t\t");

            if (unconditional.Length > 0)
                sw.WriteLine(unconditional);

            sw.WriteLine("\t\t\ttry {");

            var setup = managedCall.Setup("\t\t\t\t");

            if (setup.Length > 0)
                sw.WriteLine(setup);

            if (_returnValue.CsType == "void")
                sw.WriteLine("\t\t\t\tmanaged ({0});", managedCall);
            else
                sw.WriteLine("\t\t\t\t{0} __ret = managed ({1});", _returnValue.CsType, managedCall);

            var finish = managedCall.Finish("\t\t\t\t");

            if (finish.Length > 0)
                sw.WriteLine(finish);

            sw.WriteLine("\t\t\t\tif (release_on_call)\n\t\t\t\t\tgch.Free ();");

            var countParameter = _returnValue.CountParameter;

            if (countParameter != null)
                sw.WriteLine("\t\t\t\t{0} = {1}{2};", countParameter.Name,
                    countParameter.CsType == "int"
                        ? string.Empty
                        : $"({countParameter.MarshalType})({countParameter.CsType})", "__ret.Length");

            if (_returnValue.CsType != "void")
                sw.WriteLine("\t\t\t\treturn {0};", _returnValue.ToNative("__ret"));

            /*
             If the function expects one or more "out" parameters (error parameters are excluded)
             or has a return value different from void and bool, exceptions thrown in the managed function
             have to be considered fatal meaning that an exception is to be thrown and the function call cannot not return
            */

            var fatal = _returnValue.MarshalType != "void" && _returnValue.MarshalType != "bool" || managedCall.HasOutParam;

            sw.WriteLine("\t\t\t} catch (Exception e) {");
            sw.WriteLine($"\t\t\t\tGLib.ExceptionManager.RaiseUnhandledException (e, {(fatal ? "true" : "false")});");
            
            if (fatal)
            {
                sw.WriteLine("\t\t\t\t// NOTREACHED: Above call does not return.");
                sw.WriteLine("\t\t\t\tthrow e;");
            }
            else if (_returnValue.MarshalType == "bool")
            {
                sw.WriteLine("\t\t\t\treturn false;");
            }

            sw.WriteLine("\t\t\t}");
            sw.WriteLine("\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\tbool release_on_call = false;");
            sw.WriteLine("\t\tGCHandle gch;");
            sw.WriteLine();
            sw.WriteLine("\t\tpublic void PersistUntilCalled ()");
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\trelease_on_call = true;");
            sw.WriteLine("\t\t\tgch = GCHandle.Alloc (this);");
            sw.WriteLine("\t\t}");
            sw.WriteLine();
            sw.WriteLine($"\t\tinternal {wrapper} NativeDelegate;");
            sw.WriteLine($"\t\t{Namespace}.{Name} managed;");
            sw.WriteLine();
            sw.WriteLine($"\t\tpublic {Name}Wrapper ({Namespace}.{Name} managed)");
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\tthis.managed = managed;");
            sw.WriteLine("\t\t\tif (managed != null)");
            sw.WriteLine($"\t\t\t\tNativeDelegate = new {wrapper} (NativeCallback);");
            sw.WriteLine("\t\t}");
            sw.WriteLine();
            sw.WriteLine($"\t\tpublic static {Namespace}.{Name} GetManagedDelegate ({wrapper} native)");
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\tif (native == null)");
            sw.WriteLine("\t\t\t\treturn null;");
            sw.WriteLine($"\t\t\t{Name}Wrapper wrapper = ({Name}Wrapper) native.Target;");
            sw.WriteLine("\t\t\tif (wrapper == null)");
            sw.WriteLine("\t\t\t\treturn null;");
            sw.WriteLine("\t\t\treturn wrapper.managed;");
            sw.WriteLine("\t\t}");
            sw.WriteLine("\t}");
            sw.WriteLine("#endregion");
            sw.WriteLine("}");
            sw.Close();

            generationInfo.Writer = savedWriter;

            return $"{Namespace}Sharp.{Name}Wrapper";
        }

        private void GenerateInvoker(GenerationInfo generationInfo, StreamWriter sw)
        {
            if (_signature == null)
                _signature = new Signature(_parameters);

            sw.WriteLine($"\tinternal class {Name}Invoker {{");
            sw.WriteLine();
            sw.WriteLine($"\t\t{Name}Native native_cb;");
            sw.WriteLine("\t\tIntPtr __data;");
            sw.WriteLine("\t\tGLib.DestroyNotify __notify;");
            sw.WriteLine();
            sw.WriteLine($"\t\t~{Name}Invoker ()");
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\tif (__notify == null)");
            sw.WriteLine("\t\t\t\treturn;");
            sw.WriteLine("\t\t\t__notify (__data);");
            sw.WriteLine("\t\t}");
            sw.WriteLine();
            sw.WriteLine(
                $"\t\tinternal {Name}Invoker ({Name}Native native_cb) : this (native_cb, IntPtr.Zero, null) {{}}");
            sw.WriteLine();
            sw.WriteLine(
                $"\t\tinternal {Name}Invoker ({Name}Native native_cb, IntPtr data) : this (native_cb, data, null) {{}}");
            sw.WriteLine();
            sw.WriteLine($"\t\tinternal {Name}Invoker ({Name}Native native_cb, IntPtr data, GLib.DestroyNotify notify)");
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\tthis.native_cb = native_cb;");
            sw.WriteLine("\t\t\t__data = data;");
            sw.WriteLine("\t\t\t__notify = notify;");
            sw.WriteLine("\t\t}");
            sw.WriteLine();
            sw.WriteLine($"\t\tinternal {QualifiedName} Handler {{");
            sw.WriteLine("\t\t\tget {");
            sw.WriteLine($"\t\t\t\treturn new {QualifiedName}(InvokeNative);");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine("\t\t}");
            sw.WriteLine();
            sw.WriteLine($"\t\t{_returnValue.CsType} InvokeNative ({_signature})");
            sw.WriteLine("\t\t{");

            _body.Initialize(generationInfo);

            var call = $"native_cb ({InvokeString})";

            sw.WriteLine(_returnValue.IsVoid
                ? $"\t\t\t{call};"
                : $"\t\t\t{_returnValue.CsType} __result = {_returnValue.FromNative(call)};");


            _body.Finish(sw, string.Empty);
            
            if (!_returnValue.IsVoid)
                sw.WriteLine("\t\t\treturn __result;");

            sw.WriteLine("\t\t}");
            sw.WriteLine("\t}");
            sw.WriteLine();
        }

        private string InvokeString
        {
            get
            {
                if (_parameters.Count == 0)
                    return string.Empty;

                var result = new string[_parameters.Count];
                for (var i = 0; i < _parameters.Count; i++)
                {
                    var parameter = _parameters[i];
                    var generatable = parameter.Generatable;

                    if (i > 0 && _parameters[i - 1].IsString && parameter.IsLength)
                    {
                        result[i] = generatable.CallByName(
                            $"{CastFromInt(parameter.CsType)}System.Text.Encoding.UTF8.GetByteCount ({_parameters[i - 1].Name})");

                        continue;
                    }

                    parameter.CallName = parameter.Name;
                    result[i] = parameter.CallString;
                    if (parameter.IsUserData)
                        result[i] = "__data";
                }

                return string.Join(", ", result);
            }
        }

        private static string CastFromInt(string type)
        {
            return type != "int" ? $"({type}) " : string.Empty;
        }

        public override bool Validate()
        {
            _valid = true;

            var log = new LogWriter(QualifiedName)
            {
                Type = QualifiedName
            };

            if (!_returnValue.Validate(log) || !_parameters.Validate(log))
            {
                Statistics.ThrottledCount++;
                _valid = false;
            }

            if (!string.IsNullOrEmpty(_returnValue.CountParameterName))
                _returnValue.CountParameter = _parameters.GetCountParameter(_returnValue.CountParameterName);

            if (_returnValue.CountParameterIndex >= 0)
                _returnValue.CountParameter = _parameters[_returnValue.CountParameterIndex];

            return _valid;
        }

        public void WriteAccessors(TextWriter textWriter, string indent, string fieldName)
        {
            textWriter.WriteLine($"{indent}get {{");
            textWriter.WriteLine($"{indent}\treturn {FromNative(fieldName)};");
            textWriter.WriteLine($"{indent}}}");
        }
    }
}
