// GtkSharp.Generation.EnumGen.cs - The Enumeration Generatable.
//
// Author: Mike Kestner <mkestner@speakeasy.net>
//
// Copyright (c) 2001 Mike Kestner
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the GNU General Public
// License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml;
using GapiCodegen.Utils;

namespace GapiCodegen.Generatables
{
    /// <summary>
    /// Handles 'enum' elements.
    /// </summary>
    public class EnumGen : GenBase
    {
        private readonly string _enumType = string.Empty;
        private readonly IList<string> _members = new List<string>();

        public EnumGen(XmlElement namespaceElement, XmlElement element) : base(namespaceElement, element)
        {
            foreach (XmlElement member in element.ChildNodes)
            {
                if (member.Name != Constants.Member)
                    continue;

                var result = $"\t\t{member.GetAttribute(Constants.Name)}";

                if (member.HasAttribute(Constants.Value))
                {
                    var value = member.GetAttribute(Constants.Value).Trim();

                    foreach (Match match in Regex.Matches(value, "[0-9]+([UL]{1,2})", RegexOptions.IgnoreCase))
                    {
                        switch (match.Groups[1].Value.ToUpper())
                        {
                            case "U":
                                _enumType = " : uint";
                                break;
                            case "L":
                                _enumType = " : long";
                                break;
                            case "UL":
                                _enumType = " : ulong";
                                break;
                        }
                    }

                    result += $" = {value}";
                }

                _members.Add($"{result},");
            }

            if (element.HasAttribute("enum_type"))
                _enumType = $" : {element.GetAttribute("enum_type")}";
        }

        public override string DefaultValue => $"({QualifiedName}) 0";

        public override string MarshalType => "int";

        public override string CallByName(string varName)
        {
            return $"(int) {varName}";
        }

        public override string FromNative(string varName)
        {
            return $"({QualifiedName}) {varName}";
        }

        public override string GenerateAlign()
        {
            return null;
        }

        public override void Generate(GenerationInfo generationInfo)
        {
            var sw = generationInfo.OpenStream(Name, Namespace);

            sw.WriteLine($"namespace {Namespace} {{");
            sw.WriteLine();
            sw.WriteLine("\tusing System;");
            sw.WriteLine("\tusing System.Runtime.InteropServices;");
            sw.WriteLine();

            sw.WriteLine("#region Autogenerated code");

            if (Element.GetAttribute(Constants.Type) == "flags")
                sw.WriteLine("\t[Flags]");

            if (Element.HasAttribute(Constants.GType))
                sw.WriteLine($"\t[GLib.GType (typeof ({Namespace}.{Name}GType))]");

            var access = IsInternal ? "internal" : "public";
            sw.WriteLine($"\t{access} enum {Name}{_enumType} {{");
            sw.WriteLine();

            foreach (var member in _members)
                sw.WriteLine(member);

            sw.WriteLine("\t}");

            if (Element.HasAttribute(Constants.GType))
            {
                var funcName = Element.GetAttribute(Constants.GType);

                sw.WriteLine();
                sw.WriteLine($"\tinternal class {Name}GType {{");
                sw.WriteLine("\t\t[UnmanagedFunctionPointer (CallingConvention.Cdecl)]");
                sw.WriteLine($"\t\tdelegate IntPtr d_{funcName}();");
                sw.WriteLine(
                    $"\t\tstatic d_{funcName} {funcName} = FuncLoader.LoadFunction<d_{funcName}>(FuncLoader.GetProcAddress(GLibrary.Load({LibraryName}), \"{funcName}\"));");
                sw.WriteLine();
                sw.WriteLine("\t\tpublic static GLib.GType GType {");
                sw.WriteLine("\t\t\tget {");
                sw.WriteLine($"\t\t\t\treturn new GLib.GType ({Element.GetAttribute(Constants.GType)} ());");
                sw.WriteLine("\t\t\t}");
                sw.WriteLine("\t\t}");
                sw.WriteLine("\t}");
            }

            sw.WriteLine("#endregion");
            sw.WriteLine("}");
            sw.Close();

            Statistics.EnumCount++;
        }

        public override bool Validate()
        {
            return true;
        }
    }
}
